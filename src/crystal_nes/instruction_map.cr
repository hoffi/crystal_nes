module CrystalNes
  INSTRUCTION_MAP = {
    # Opcode, Method, Mnemonic, Operands, Addressing Mode, Cycles
    0x00 => {->(cpu : Cpu, arg : UInt16) { cpu.brk() }, "BRK", 0, :implied, 7},
    0x01 => {->(cpu : Cpu, arg : UInt16) { cpu.ora(arg) }, "ORA", 1, :indexed_indirect, 6},
    0x02 => {->(cpu : Cpu, arg : UInt16) { cpu.hlt() }, "KIL", 1, :implied, 0}, # TODO Prio 2: Illegal instruction
    0x03 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "SLO", 1, :indexed_indirect, 8}, # TODO Prio 2: Illegal instruction
    0x04 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page, 3},
    0x05 => {->(cpu : Cpu, arg : UInt16) { cpu.ora(arg) }, "ORA", 1, :zero_page, 3},
    0x06 => {->(cpu : Cpu, arg : UInt16) { cpu.asl(arg) }, "ASL", 1, :zero_page, 5},
    0x07 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "SLO", 1, :zero_page, 5}, # TODO Prio 2: Illegal instruction
    0x08 => {->(cpu : Cpu, arg : UInt16) { cpu.php() }, "PHP", 0, :implied, 3},
    0x09 => {->(cpu : Cpu, arg : UInt16) { cpu.ora(arg) }, "ORA", 1, :immediate, 2},
    0x0A => {->(cpu : Cpu, arg : UInt16) { cpu.asl() }, "ASL", 0, :accumulator, 2},
    0x0B => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "ANC", 1, :immediate, 2}, # TODO Prio 2: Illegal instruction
    0x0C => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 2, :absolute, 4},
    0x0D => {->(cpu : Cpu, arg : UInt16) { cpu.ora(arg) }, "ORA", 2, :absolute, 4},
    0x0E => {->(cpu : Cpu, arg : UInt16) { cpu.asl(arg) }, "ASL", 2, :absolute, 6},
    0x0F => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "SLO", 2, :absolute, 6}, # TODO Prio 2: Illegal instruction
    0x10 => {->(cpu : Cpu, arg : UInt16) { cpu.bpl(arg) }, "BPL", 1, :relative, 2},
    0x11 => {->(cpu : Cpu, arg : UInt16) { cpu.ora(arg) }, "ORA", 1, :indirect_indexed, 5},
    0x12 => {->(cpu : Cpu, arg : UInt16) { cpu.hlt() }, "KIL", 1, :implied, 0}, # TODO Prio 2: Illegal instruction
    0x13 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "SLO", 1, :indirect_indexed, 8}, # TODO Prio 2: Illegal instruction
    0x14 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page_x, 4},
    0x15 => {->(cpu : Cpu, arg : UInt16) { cpu.ora(arg) }, "ORA", 1, :zero_page_x, 4},
    0x16 => {->(cpu : Cpu, arg : UInt16) { cpu.asl(arg) }, "ASL", 1, :zero_page_x, 6},
    0x17 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "SLO", 1, :zero_page_x, 6}, # TODO Prio 2: Illegal instruction
    0x18 => {->(cpu : Cpu, arg : UInt16) { cpu.clc() }, "CLC", 0, :implied, 2},
    0x19 => {->(cpu : Cpu, arg : UInt16) { cpu.ora(arg) }, "ORA", 2, :absolute_y, 4}, # TODO: +1 Cycle on Page Boundary Cross
    0x1A => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 0, :implied, 2},
    0x1B => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "SLO", 2, :absolute_y, 7}, # TODO Prio 2: Illegal instruction
    0x1C => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 2, :absolute_x, 4}, # TODO: +1 Cycle on Page Boundary Cross
    0x1D => {->(cpu : Cpu, arg : UInt16) { cpu.ora(arg) }, "ORA", 2, :absolute_x, 4}, # TODO: +1 Cycle on Page Boundary Cross
    0x1E => {->(cpu : Cpu, arg : UInt16) { cpu.asl(arg) }, "ASL", 2, :absolute_x, 7},
    0x1F => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "SLO", 2, :absolute_x, 7}, # TODO Prio 2: Illegal instruction
    0x20 => {->(cpu : Cpu, arg : UInt16) { cpu.jsr(arg) }, "JSR", 2, :absolute, 6},
    0x21 => {->(cpu : Cpu, arg : UInt16) { cpu.and(arg) }, "AND", 1, :indexed_indirect, 6},
    0x24 => {->(cpu : Cpu, arg : UInt16) { cpu.bit(arg) }, "BIT", 1, :zero_page, 3},
    0x25 => {->(cpu : Cpu, arg : UInt16) { cpu.and(arg) }, "AND", 1, :zero_page, 3},
    0x26 => {->(cpu : Cpu, arg : UInt16) { cpu.rol(arg) }, "ROL", 1, :zero_page, 5},
    0x28 => {->(cpu : Cpu, arg : UInt16) { cpu.plp() }, "PLP", 0, :implied, 4},
    0x29 => {->(cpu : Cpu, arg : UInt16) { cpu.and(arg) }, "AND", 1, :immediate, 2},
    0x2A => {->(cpu : Cpu, arg : UInt16) { cpu.rol() }, "ROL", 0, :accumulator, 2},
    0x2C => {->(cpu : Cpu, arg : UInt16) { cpu.bit(arg) }, "BIT", 2, :absolute, 4},
    0x2D => {->(cpu : Cpu, arg : UInt16) { cpu.and(arg) }, "AND", 2, :absolute, 4},
    0x2E => {->(cpu : Cpu, arg : UInt16) { cpu.rol(arg) }, "ROL", 2, :absolute, 6},
    0x30 => {->(cpu : Cpu, arg : UInt16) { cpu.bmi(arg) }, "BMI", 1, :relative, 2},
    0x31 => {->(cpu : Cpu, arg : UInt16) { cpu.and(arg) }, "AND", 1, :indirect_indexed, 5},
    0x33 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :indexed_indirect, 8}, # TODO: RLA Illegal Instruction
    0x34 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page_x, 4},
    0x35 => {->(cpu : Cpu, arg : UInt16) { cpu.and(arg) }, "AND", 1, :zero_page_x, 4},
    0x36 => {->(cpu : Cpu, arg : UInt16) { cpu.rol(arg) }, "ROL", 1, :zero_page_x, 6},
    0x38 => {->(cpu : Cpu, arg : UInt16) { cpu.sec() }, "SEC", 0, :implied, 2},
    0x39 => {->(cpu : Cpu, arg : UInt16) { cpu.and(arg) }, "AND", 2, :absolute_y, 4},
    0x3A => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 0, :implied, 2},
    0x3C => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 2, :absolute_x, 4},
    0x3D => {->(cpu : Cpu, arg : UInt16) { cpu.and(arg) }, "AND", 2, :absolute_x, 4},
    0x3E => {->(cpu : Cpu, arg : UInt16) { cpu.rol(arg) }, "ROL", 2, :absolute_x, 7},
    0x40 => {->(cpu : Cpu, arg : UInt16) { cpu.rti() }, "RTI", 0, :implied, 6},
    0x41 => {->(cpu : Cpu, arg : UInt16) { cpu.eor(arg) }, "EOR", 1, :indexed_indirect, 6},
    0x44 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page, 3},
    0x45 => {->(cpu : Cpu, arg : UInt16) { cpu.eor(arg) }, "EOR", 1, :zero_page, 3},
    0x46 => {->(cpu : Cpu, arg : UInt16) { cpu.lsr(arg) }, "LSR", 1, :zero_page, 3},
    0x48 => {->(cpu : Cpu, arg : UInt16) { cpu.pha() }, "PHA", 0, :implied, 3},
    0x49 => {->(cpu : Cpu, arg : UInt16) { cpu.eor(arg) }, "EOR", 1, :immediate, 2},
    0x4A => {->(cpu : Cpu, arg : UInt16) { cpu.lsr() }, "LSR", 0, :accumulator, 2},
    0x4C => {->(cpu : Cpu, arg : UInt16) { cpu.jmp(arg) }, "JMP", 2, :absolute, 3},
    0x4D => {->(cpu : Cpu, arg : UInt16) { cpu.eor(arg) }, "EOR", 2, :absolute, 4},
    0x4E => {->(cpu : Cpu, arg : UInt16) { cpu.lsr(arg) }, "LSR", 2, :absolute, 6},
    0x50 => {->(cpu : Cpu, arg : UInt16) { cpu.bvc(arg) }, "BVC", 1, :relative, 2},
    0x51 => {->(cpu : Cpu, arg : UInt16) { cpu.eor(arg) }, "EOR", 1, :indirect_indexed, 5},
    0x54 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page_x, 4},
    0x55 => {->(cpu : Cpu, arg : UInt16) { cpu.eor(arg) }, "EOR", 1, :zero_page_x, 4},
    0x56 => {->(cpu : Cpu, arg : UInt16) { cpu.lsr(arg) }, "LSR", 1, :zero_page_x, 6},
    0x58 => {->(cpu : Cpu, arg : UInt16) { cpu.cli() }, "CLI", 0, :implied, 2},
    0x59 => {->(cpu : Cpu, arg : UInt16) { cpu.eor(arg) }, "EOR", 2, :absolute_y, 4},
    0x5A => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 0, :implied, 2},
    0x5C => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 2, :absolute_x, 4},
    0x5D => {->(cpu : Cpu, arg : UInt16) { cpu.eor(arg) }, "EOR", 2, :absolute_x, 4},
    0x5E => {->(cpu : Cpu, arg : UInt16) { cpu.lsr(arg) }, "LSR", 2, :absolute_x, 7},
    0x60 => {->(cpu : Cpu, arg : UInt16) { cpu.rts() }, "RTS", 0, :implied, 6},
    0x61 => {->(cpu : Cpu, arg : UInt16) { cpu.adc(arg) }, "ADC", 1, :indexed_indirect, 6},
    0x64 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page, 3},
    0x65 => {->(cpu : Cpu, arg : UInt16) { cpu.adc(arg) }, "ADC", 1, :zero_page, 3},
    0x66 => {->(cpu : Cpu, arg : UInt16) { cpu.ror(arg) }, "ROR", 1, :zero_page, 5},
    0x68 => {->(cpu : Cpu, arg : UInt16) { cpu.pla() }, "PLA", 0, :implied, 4},
    0x69 => {->(cpu : Cpu, arg : UInt16) { cpu.adc(arg) }, "ADC", 1, :immediate, 2},
    0x6A => {->(cpu : Cpu, arg : UInt16) { cpu.ror() }, "ROR", 0, :accumulator, 2},
    0x6C => {->(cpu : Cpu, arg : UInt16) { cpu.jmp(arg) }, "JMP", 2, :indirect, 5},
    0x6D => {->(cpu : Cpu, arg : UInt16) { cpu.adc(arg) }, "ADC", 2, :absolute, 4},
    0x6E => {->(cpu : Cpu, arg : UInt16) { cpu.ror(arg) }, "ROR", 2, :absolute, 6},
    0x70 => {->(cpu : Cpu, arg : UInt16) { cpu.bvs(arg) }, "BVS", 1, :relative, 2},
    0x71 => {->(cpu : Cpu, arg : UInt16) { cpu.adc(arg) }, "ADC", 1, :indirect_indexed, 5},
    0x74 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page_x, 4},
    0x75 => {->(cpu : Cpu, arg : UInt16) { cpu.adc(arg) }, "ADC", 1, :zero_page_x, 4},
    0x76 => {->(cpu : Cpu, arg : UInt16) { cpu.ror(arg) }, "ROR", 1, :zero_page_x, 6},
    0x78 => {->(cpu : Cpu, arg : UInt16) { cpu.sei() }, "SEI", 0, :implied, 2},
    0x79 => {->(cpu : Cpu, arg : UInt16) { cpu.adc(arg) }, "ADC", 2, :absolute_y, 4},
    0x7A => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 0, :implied, 2},
    0x7C => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 2, :absolute_x, 4},
    0x7D => {->(cpu : Cpu, arg : UInt16) { cpu.adc(arg) }, "ADC", 2, :absolute_x, 4},
    0x7E => {->(cpu : Cpu, arg : UInt16) { cpu.ror(arg) }, "ROR", 2, :absolute_x, 7},
    0x80 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :immediate, 2},
    0x81 => {->(cpu : Cpu, arg : UInt16) { cpu.sta(arg) }, "STA", 1, :indexed_indirect, 6},
    0x83 => {->(cpu : Cpu, arg : UInt16) { cpu.sax(arg) }, "SAX", 1, :indexed_indirect, 6},
    0x84 => {->(cpu : Cpu, arg : UInt16) { cpu.sty(arg) }, "STY", 1, :zero_page, 3},
    0x85 => {->(cpu : Cpu, arg : UInt16) { cpu.sta(arg) }, "STA", 1, :zero_page, 3},
    0x86 => {->(cpu : Cpu, arg : UInt16) { cpu.stx(arg) }, "STX", 1, :zero_page, 3},
    0x87 => {->(cpu : Cpu, arg : UInt16) { cpu.sax(arg) }, "SAX", 1, :zero_page, 3},
    0x88 => {->(cpu : Cpu, arg : UInt16) { cpu.dey() }, "DEY", 0, :implied, 2},
    0x8A => {->(cpu : Cpu, arg : UInt16) { cpu.txa() }, "TXA", 0, :implied, 2},
    0x8C => {->(cpu : Cpu, arg : UInt16) { cpu.sty(arg) }, "STY", 2, :absolute, 4},
    0x8D => {->(cpu : Cpu, arg : UInt16) { cpu.sta(arg) }, "STA", 2, :absolute, 4},
    0x8E => {->(cpu : Cpu, arg : UInt16) { cpu.stx(arg) }, "STX", 2, :absolute, 4},
    0x8F => {->(cpu : Cpu, arg : UInt16) { cpu.sax(arg) }, "SAX", 2, :absolute, 4},
    0x90 => {->(cpu : Cpu, arg : UInt16) { cpu.bcc(arg) }, "BCC", 1, :relative, 2},
    0x91 => {->(cpu : Cpu, arg : UInt16) { cpu.sta(arg) }, "STA", 1, :indirect_indexed, 6},
    0x94 => {->(cpu : Cpu, arg : UInt16) { cpu.sty(arg) }, "STY", 1, :zero_page_x, 4},
    0x95 => {->(cpu : Cpu, arg : UInt16) { cpu.sta(arg) }, "STA", 1, :zero_page_x, 4},
    0x96 => {->(cpu : Cpu, arg : UInt16) { cpu.stx(arg) }, "STX", 1, :zero_page_y, 4},
    0x97 => {->(cpu : Cpu, arg : UInt16) { cpu.sax(arg) }, "SAX", 1, :zero_page_y, 4},
    0x98 => {->(cpu : Cpu, arg : UInt16) { cpu.tya() }, "TYA", 0, :implied, 2},
    0x99 => {->(cpu : Cpu, arg : UInt16) { cpu.sta(arg) }, "STA", 2, :absolute_y, 5},
    0x9A => {->(cpu : Cpu, arg : UInt16) { cpu.txs() }, "TXS", 0, :implied, 2},
    0x9D => {->(cpu : Cpu, arg : UInt16) { cpu.sta(arg) }, "STA", 2, :absolute_x, 5},
    0xA0 => {->(cpu : Cpu, arg : UInt16) { cpu.ldy(arg) }, "LDY", 1, :immediate, 2},
    0xA1 => {->(cpu : Cpu, arg : UInt16) { cpu.lda(arg) }, "LDA", 1, :indexed_indirect, 6},
    0xA2 => {->(cpu : Cpu, arg : UInt16) { cpu.ldx(arg) }, "LDX", 1, :immediate, 2},
    0xA3 => {->(cpu : Cpu, arg : UInt16) { cpu.lax(arg) }, "LAX", 1, :indexed_indirect, 6},
    0xA4 => {->(cpu : Cpu, arg : UInt16) { cpu.ldy(arg) }, "LDY", 1, :zero_page, 3},
    0xA5 => {->(cpu : Cpu, arg : UInt16) { cpu.lda(arg) }, "LDA", 1, :zero_page, 3},
    0xA6 => {->(cpu : Cpu, arg : UInt16) { cpu.ldx(arg) }, "LDX", 1, :zero_page, 3},
    0xA7 => {->(cpu : Cpu, arg : UInt16) { cpu.lax(arg) }, "LAX", 1, :zero_page, 3},
    0xA8 => {->(cpu : Cpu, arg : UInt16) { cpu.tay() }, "TAY", 0, :implied, 2},
    0xA9 => {->(cpu : Cpu, arg : UInt16) { cpu.lda(arg) }, "LDA", 1, :immediate, 2},
    0xAA => {->(cpu : Cpu, arg : UInt16) { cpu.tax() }, "TAX", 0, :implied, 2},
    0xAB => {->(cpu : Cpu, arg : UInt16) { cpu.lax(arg) }, "LAX", 1, :immediate, 2},
    0xAC => {->(cpu : Cpu, arg : UInt16) { cpu.ldy(arg) }, "LDY", 2, :absolute, 4},
    0xAD => {->(cpu : Cpu, arg : UInt16) { cpu.lda(arg) }, "LDA", 2, :absolute, 4},
    0xAE => {->(cpu : Cpu, arg : UInt16) { cpu.ldx(arg) }, "LDX", 2, :absolute, 4},
    0xAF => {->(cpu : Cpu, arg : UInt16) { cpu.lax(arg) }, "LAX", 2, :absolute, 4},
    0xB0 => {->(cpu : Cpu, arg : UInt16) { cpu.bcs(arg) }, "BCS", 1, :relative, 2},
    0xB1 => {->(cpu : Cpu, arg : UInt16) { cpu.lda(arg) }, "LDA", 1, :indirect_indexed, 5},
    0xB3 => {->(cpu : Cpu, arg : UInt16) { cpu.lax(arg) }, "LAX", 1, :indirect_indexed, 4},
    0xB4 => {->(cpu : Cpu, arg : UInt16) { cpu.ldy(arg) }, "LDY", 1, :zero_page_x, 4},
    0xB5 => {->(cpu : Cpu, arg : UInt16) { cpu.lda(arg) }, "LDA", 1, :zero_page_x, 4},
    0xB6 => {->(cpu : Cpu, arg : UInt16) { cpu.ldx(arg) }, "LDX", 1, :zero_page_y, 4},
    0xB7 => {->(cpu : Cpu, arg : UInt16) { cpu.lax(arg) }, "LAX", 1, :zero_page_y, 4},
    0xB8 => {->(cpu : Cpu, arg : UInt16) { cpu.clv() }, "CLV", 0, :implied, 2},
    0xB9 => {->(cpu : Cpu, arg : UInt16) { cpu.lda(arg) }, "LDA", 2, :absolute_y, 4},
    0xBA => {->(cpu : Cpu, arg : UInt16) { cpu.tsx() }, "TSX", 0, :implied, 2},
    0xBC => {->(cpu : Cpu, arg : UInt16) { cpu.ldy(arg) }, "LDY", 2, :absolute_x, 4},
    0xBD => {->(cpu : Cpu, arg : UInt16) { cpu.lda(arg) }, "LDA", 2, :absolute_x, 4},
    0xBE => {->(cpu : Cpu, arg : UInt16) { cpu.ldx(arg) }, "LDX", 2, :absolute_y, 4},
    0xBF => {->(cpu : Cpu, arg : UInt16) { cpu.lax(arg) }, "LAX", 2, :absolute_y, 4},
    0xC0 => {->(cpu : Cpu, arg : UInt16) { cpu.cpy(arg) }, "CPY", 1, :immediate, 2},
    0xC1 => {->(cpu : Cpu, arg : UInt16) { cpu.cmp(arg) }, "CMP", 1, :indexed_indirect, 6},
    0xC4 => {->(cpu : Cpu, arg : UInt16) { cpu.cpy(arg) }, "CPY", 1, :zero_page, 3},
    0xC5 => {->(cpu : Cpu, arg : UInt16) { cpu.cmp(arg) }, "CMP", 1, :zero_page, 3},
    0xC6 => {->(cpu : Cpu, arg : UInt16) { cpu.dec(arg) }, "DEC", 1, :zero_page, 5},
    0xC8 => {->(cpu : Cpu, arg : UInt16) { cpu.iny() }, "INY", 0, :implied, 2},
    0xC9 => {->(cpu : Cpu, arg : UInt16) { cpu.cmp(arg) }, "CMP", 1, :immediate, 2},
    0xCA => {->(cpu : Cpu, arg : UInt16) { cpu.dex() }, "DEX", 0, :implied, 2},
    0xCC => {->(cpu : Cpu, arg : UInt16) { cpu.cpy(arg) }, "CPY", 2, :absolute, 4},
    0xCD => {->(cpu : Cpu, arg : UInt16) { cpu.cmp(arg) }, "CMP", 2, :absolute, 4},
    0xCE => {->(cpu : Cpu, arg : UInt16) { cpu.dec(arg) }, "DEC", 2, :absolute, 6},
    0xD0 => {->(cpu : Cpu, arg : UInt16) { cpu.bne(arg) }, "BNE", 1, :relative, 2},
    0xD1 => {->(cpu : Cpu, arg : UInt16) { cpu.cmp(arg) }, "CMP", 1, :indirect_indexed, 5},
    0xD4 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page_x, 4},
    0xD5 => {->(cpu : Cpu, arg : UInt16) { cpu.cmp(arg) }, "CMP", 1, :zero_page_x, 4},
    0xD6 => {->(cpu : Cpu, arg : UInt16) { cpu.dec(arg) }, "DEC", 1, :zero_page_x, 6},
    0xD8 => {->(cpu : Cpu, arg : UInt16) { cpu.cld() }, "CLD", 0, :implied, 2},
    0xD9 => {->(cpu : Cpu, arg : UInt16) { cpu.cmp(arg) }, "CMP", 2, :absolute_y, 4},
    0xDA => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 0, :implied, 2},
    0xDC => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 2, :absolute_x, 4},
    0xDD => {->(cpu : Cpu, arg : UInt16) { cpu.cmp(arg) }, "CMP", 2, :absolute_x, 4},
    0xDE => {->(cpu : Cpu, arg : UInt16) { cpu.dec(arg) }, "DEC", 2, :absolute_x, 7},
    0xE0 => {->(cpu : Cpu, arg : UInt16) { cpu.cpx(arg) }, "CPX", 1, :immediate, 2},
    0xE1 => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 1, :indexed_indirect, 6},
    0xE4 => {->(cpu : Cpu, arg : UInt16) { cpu.cpx(arg) }, "CPX", 1, :zero_page, 3},
    0xE5 => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 1, :zero_page, 3},
    0xE6 => {->(cpu : Cpu, arg : UInt16) { cpu.inc(arg) }, "INC", 1, :zero_page, 5},
    0xE8 => {->(cpu : Cpu, arg : UInt16) { cpu.inx() }, "INX", 0, :implied, 2},
    0xE9 => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 1, :immediate, 2},
    0xEA => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 0, :implied, 2},
    0xEB => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 1, :immediate, 2},
    0xEC => {->(cpu : Cpu, arg : UInt16) { cpu.cpx(arg) }, "CPX", 2, :absolute, 4},
    0xED => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 2, :absolute, 4},
    0xEE => {->(cpu : Cpu, arg : UInt16) { cpu.inc(arg) }, "INC", 2, :absolute, 6},
    0xF0 => {->(cpu : Cpu, arg : UInt16) { cpu.beq(arg) }, "BEQ", 1, :relative, 2},
    0xF1 => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 1, :indirect_indexed, 5},
    0xF4 => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 1, :zero_page_x, 4},
    0xF5 => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 1, :zero_page_x, 4},
    0xF6 => {->(cpu : Cpu, arg : UInt16) { cpu.inc(arg) }, "INC", 1, :zero_page_x, 6},
    0xF8 => {->(cpu : Cpu, arg : UInt16) { cpu.sed() }, "SED", 0, :implied, 2},
    0xF9 => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 2, :absolute_y, 4},
    0xFA => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 0, :implied, 2},
    0xFC => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "NOP", 2, :absolute_x, 4},
    0xFD => {->(cpu : Cpu, arg : UInt16) { cpu.sbc(arg) }, "SBC", 2, :absolute_x, 4},
    0xFE => {->(cpu : Cpu, arg : UInt16) { cpu.inc(arg) }, "INC", 2, :absolute_x, 7},
    0xFF => {->(cpu : Cpu, arg : UInt16) { cpu.nop() }, "ISC", 2, :absolute_x, 7},
  }
end
